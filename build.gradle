apply plugin: 'scala'
apply from: "gradle/utilities.gradle"

//fix for scala-java cross compilation
compileScala.taskDependencies.values = compileScala.taskDependencies.values - 'compileJava'
compileJava.dependsOn compileScala

configurations {
    provided {
        transitive = false
    }
    compile {
        transitive = false
    }
    testCompile {
        transitive = false
}   }

repositories {
    mavenCentral()
}

dependencies {
    //scala plugin dependencies
    scalaTools      'org.scala-lang:scala-compiler:2.10.0-M1'
    scalaTools      'org.scala-lang:scala-library:2.10.0-M1'

    //compile dependencies
    compile         'org.json:json:20090211'
    compile         'net.sourceforge.findbugs:jsr305:1.3.7'
    compile         'org.scala-lang:scala-library:2.10.0-M1'
    compile         fileTree(dir:'lib/local/compile', includes: ['reactive-core.jar'])

    //provided dependencies
    provided        'org.slf4j:slf4j-api:1.6.1'
    provided        'org.slf4j:slf4j-jdk14:1.6.1'
    provided        'com.google.guava:guava:r05'
    provided        'commons-lang:commons-lang:2.6'
    provided        'commons-httpclient:commons-httpclient:3.1'
    provided        'commons-io:commons-io:2.1'
    provided        'commons-codec:commons-codec:1.6'

    //test dependencies
    testCompile     'junit:junit:4.10'
    testCompile     'org.easymock:easymock:3.1'
    testCompile     'org.powermock:powermock-api-easymock:1.4.11'
    testCompile     'org.powermock:powermock-module-javaagent:1.4.11'
    testCompile     'org.powermock:powermock-api-support:1.4.11'
    testCompile     'org.scalatest:scalatest_2.9.0:1.6.1'
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        scala {
            srcDir       'src'
        }
        java {
            srcDir       'src'
        }
    }
}

archivesBaseName = "sellstome-solr"

/** cleanup all old lib from project */
task cleanupLib(type: Delete) {
    delete fileTree(dir: 'lib/main/compile',    include: '*.jar')
    delete fileTree(dir: 'lib/main/provided',   include: '*.jar')
    delete fileTree(dir: 'lib/main/runtime',    include: '*.jar')
    delete fileTree(dir: 'lib/test/compile',    include: '*.jar')
    delete fileTree(dir: 'lib/test/runtime',    include: '*.jar')
}

/** Resolves the project dependency graph and uploads all lib to the local directory  */
task updateLibs(type: Sync) {
    /** copy compiled configuration */
    copy {
        from  configurations.compile
        into 'lib/main/compile'
    }
    /** copy provided configuration */
    copy {
        from configurations.provided
        into 'lib/main/provided'
    }
    /** copy runtime configuration */
    copy {
        from filterExtendDependencies(configurations.runtime, configurations.compile)
        into 'lib/main/runtime'
    }
    /** copy test compile configuration */
    copy {
        from filterExtendDependencies(configurations.testCompile, configurations.compile)
        into 'lib/test/compile'
    }
    /** copy test runtime configuration */
    copy {
        from filterExtendDependencies(configurations.testRuntime, configurations.testCompile, configurations.compile )
        into 'lib/test/runtime'
    }
}

/** Allows to rebuild a solr configuration */
task configSolr(type: Copy, dependsOn: 'jar') {

    description = 'Updates the solr confguration on server'

    copy {
        from    'conf/solr'
        into    '/var/solr/sellstome'
    }

    /** copy library dependencies */
    copy {
        from configurations.compile
        into '/var/solr/sellstome/lib'
    }

    copy {
        from configurations.runtime
        into '/var/solr/sellstome/lib'
    }

    /** publish compiled artifacts */
    copy {
        from configurations.archives.allArtifacts.files
        into '/var/solr/sellstome/lib'
    }

}
