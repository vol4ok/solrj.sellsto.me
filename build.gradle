apply plugin: 'scala'

configurations {
    provided {
        //todo zhugrov a - how to specify to load only compile time dependencies
        transitive = true
    }
    compile {
        transitive = false
    }
    testCompile {
        transitive = false
}   }

repositories {
    mavenCentral()
}

dependencies {
    scalaTools 'org.scala-lang:scala-compiler:2.9.1'
    scalaTools 'org.scala-lang:scala-library:2.9.1'
    //compile dependencies
    compile 'org.json:json:20090211'
    compile 'net.sourceforge.findbugs:jsr305:1.3.7'
    compile 'org.scala-lang:scala-library:2.9.1'
    //provided dependencies
    provided 'org.apache.solr:solr-core:3.4.0'
    provided 'org.apache.solr:solr-solrj:3.4.0'
    provided 'org.apache.lucene:lucene-core:3.4.0'
    //test dependencies
    testCompile 'org.easymock:easymock:3.0'
    testCompile 'org.powermock:powermock-api-easymock:1.4.10'
    testCompile 'org.powermock:powermock-module-javaagent:1.4.10'
    testCompile 'org.scalatest:scalatest_2.9.0:1.6.1'
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        scala {
            srcDir 'src'
        }
        java {
            srcDir 'src'
        }
    }
}


task syncMainDependencies(type: Sync) {
    /** copy compiled configuration */
    copy {
        from  configurations.compile
        into 'lib/main/compile'
    }
    /** copy provided configuration */
    copy {
        from configurations.provided
        into 'lib/main/provided'
    }
    /** copy runtime configuration */
    copy {
        def copied = []
        configurations.runtime.each() { runtimeDependency ->
            if (!configurations.compile.contains( runtimeDependency )) {
                copied.add( runtimeDependency )
            }
        }
        from copied
        into 'lib/main/runtime'
    }
    /** copy test compile configuration */
    copy {
        from configurations.testCompile
        into 'lib/test/compile'
    }
    /** copy test runtime configuration */
    copy {
        def copied = []
        configurations.testRuntime.each() { runtimeDependency ->
            if (!configurations.testRuntime.contains( runtimeDependency )) {
                copied.add(runtimeDependency)
            }
        }

        from copied
        into 'lib/test/runtime'
    }
}
