apply plugin: 'scala'
apply from: "gradle/utilities.gradle"

configurations {
    provided {
        transitive = false
    }
    compile {
        transitive = false
    }
    testCompile {
        transitive = false
}   }

repositories {
    mavenCentral()
}

dependencies {
    scalaTools 'org.scala-lang:scala-compiler:2.9.1'
    scalaTools 'org.scala-lang:scala-library:2.9.1'
    //compile dependencies
    compile 'org.json:json:20090211'
    compile 'net.sourceforge.findbugs:jsr305:1.3.7'
    compile 'org.scala-lang:scala-library:2.9.1'
    //provided dependencies
    provided 'org.slf4j:slf4j-api:1.6.1'
    //test dependencies
    testCompile 'org.easymock:easymock:3.0'
    testCompile 'org.powermock:powermock-api-easymock:1.4.10'
    testCompile 'org.powermock:powermock-module-javaagent:1.4.10'
    testCompile 'org.powermock:powermock-api-support:1.4.10'
    testCompile 'org.scalatest:scalatest_2.9.0:1.6.1'
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        scala {
            srcDir       'src'
        }
        java {
            srcDir       'src'
        }
    }
}

/** build and copy project jar to a solr classpath. */
task deployJar() {

}

/** cleanup all old lib from project */
task cleanupLib(type: Delete) {
    delete fileTree(dir: 'lib/main/compile',    include: '*.jar')
    delete fileTree(dir: 'lib/main/provided',   include: '*.jar')
    delete fileTree(dir: 'lib/main/runtime',    include: '*.jar')
    delete fileTree(dir: 'lib/test/compile',    include: '*.jar')
    delete fileTree(dir: 'lib/test/runtime',    include: '*.jar')
}

/** Resolves the project dependency graph and uploads all lib to the local directory  */
task syncMainDependencies(type: Sync) {
    /** copy compiled configuration */
    copy {
        from  configurations.compile
        into 'lib/main/compile'
    }
    /** copy provided configuration */
    copy {
        from configurations.provided
        into 'lib/main/provided'
    }
    /** copy runtime configuration */
    copy {
        from filterExtendDependencies(configurations.runtime, configurations.compile)
        into 'lib/main/runtime'
    }
    /** copy test compile configuration */
    copy {
        from filterExtendDependencies(configurations.testCompile, configurations.compile)
        into 'lib/test/compile'
    }
    /** copy test runtime configuration */
    copy {
        from filterExtendDependencies(configurations.testRuntime, configurations.testCompile, configurations.compile )
        into 'lib/test/runtime'
    }
}

/** Allows to rebuild a solr configuration */
task configSolr(type: Copy) {
    copy {
        from    'conf/solr'
        //todo zhugrov a - remove the hardcoded configuration
        into    '/var/solr/sellstome'
    }

}
